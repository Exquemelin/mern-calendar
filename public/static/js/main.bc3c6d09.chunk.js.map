{"version":3,"sources":["types/types.js","reducers/uiReducer.js","reducers/calendarReducer.js","reducers/authReducer.js","reducers/rootReducer.js","store/store.js","hooks/useForm.js","helpers/fetch.js","helpers/prepare-events.js","actions/events.js","actions/auth.js","components/auth/LoginScreen.js","components/ui/Navbar.js","helpers/calendar-messages-es.js","components/calendar/CalendarEvent.js","actions/ui.js","components/calendar/CalendarModal.js","components/ui/AddNewFab.js","components/ui/DeleteEventFab.js","components/calendar/CalendarScreen.js","components/routers/PublicRoute.js","components/routers/PrivateRoute.js","components/routers/AppRouter.js","CalendarApp.js","index.js"],"names":["types","initialState","modalOpen","events","activeEvent","checking","rootReducer","combineReducers","ui","state","action","type","calendar","payload","console","log","map","e","id","filter","auth","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useForm","useState","values","setValues","reset","handleInputChange","target","name","value","baseUrl","process","fetchSinToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchConToken","token","localStorage","getItem","prepareEvents","end","moment","toDate","start","eventAddNew","event","eventClearActiveEvent","eventUpdated","eventDelete","eventLoaded","checkingFinish","user","login","startLogout","dispatch","clear","logout","LoginScreen","useDispatch","lEmail","lPassword","formLoginValues","handleLoginInputChange","rName","rEmail","rPassword1","rPasswrod2","formRegisterValues","handleRegisterInputChange","className","onSubmit","email","password","preventDefault","a","resp","json","ok","setItem","Date","getTime","uid","Swal","fire","msg","placeholder","onChange","Navbar","useSelector","onClick","messages","allDay","previous","next","today","month","week","day","agenda","date","time","noEventsInRange","showMore","total","CalendarEvent","title","uiOpenModal","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","nowPlus1","clone","initEvent","notes","CalendarModal","dateStart","setDateStart","dateEnd","setDateEnd","formValues","setFormValues","titleValid","setTitleValid","useEffect","closeModal","isOpen","onRequestClose","style","closeTimeoutMS","overlayClassName","momentStart","momentEnd","isSameOrAfter","trim","length","getState","evento","eventStartAddNew","minDate","autoComplete","rows","AddNewFab","DeleteEventFab","locale","localizer","momentLocalizer","CalendarScreen","lastView","setlastView","disptach","eventos","startAccessor","endAccessor","eventPropGetter","isSelected","backgroundColor","_id","borderRadius","opacity","display","color","onDoubleClickEvent","onSelectEvent","onView","onSelectSlot","selectable","view","components","PublicRoute","isLoggedIn","Component","component","rest","props","to","PrivateRoute","AppRouter","exact","path","CalendarApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc3c6d09.chunk.js","sourcesContent":["\r\n// Creamos un objeto para centralizar todos los types de las acciones de Redux\r\nexport const types = {\r\n\r\n    // Interface de Usuario para trabajar el modal\r\n    uiOpenModal: '[ui] Open Modal',\r\n    uiCloseModal: '[ui] Close Modal',\r\n\r\n    // Interface de eventos y los tipos de acciones\r\n    eventSetActive: '[event] Set Active',\r\n    eventLogout: '[event] Clear Events',\r\n    eventStartAddNew: '[event] Start add new',\r\n    eventAddNew: '[event] Add New',\r\n    eventClearActiveEvent: '[event] Clear Active',\r\n    eventUpdate: '[event] Event Updated',\r\n    eventDelete: '[event] Event Delete',\r\n    eventLoaded: '[event] Events Loaded',\r\n\r\n    // Interface de autenticación y los tipos de acciones\r\n    authCheckin: '[auth] Checking login state',\r\n    authCheckingFinish: '[auth] Finish Checking login state',\r\n    authStartLogin: '[auth] Start login',\r\n    authLogin: '[auth]Login',\r\n    authStartRegister: '[auth] Start register',\r\n    authStartTokenRenew: '[auth] Start token renew',\r\n    authStartLogout: '[auth] Logout',\r\n    \r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n\r\n// estado inicial, con el modalOpen en false\r\nconst initialState = {\r\n    modalOpen : false,\r\n}\r\n\r\n\r\n// Reducer para la ui\r\nexport const uiReducer = ( state = initialState, action ) => {\r\n\r\n    switch ( action.type ) {\r\n        case types.uiOpenModal:\r\n            \r\n            // Establecemos la apertura del modal en true\r\n            return {\r\n                ...state,\r\n                modalOpen: true,\r\n            };\r\n\r\n        case types.uiCloseModal:\r\n\r\n            // Establecemos la apertura del modal en false\r\n            return {\r\n                ...state,\r\n                modalOpen: false,\r\n            };\r\n    \r\n        default:\r\n            \r\n            return state;\r\n    }\r\n\r\n}","// import moment from 'moment'\r\n\r\n\r\nimport { types } from '../types/types';\r\n\r\n// Este es el evento tipo. Es solo para información de como tiene que ser\r\n// {\r\n//     id: 'asdfasdfasdfasd''\r\n//     title: 'Cumpleaños del jefe',\r\n//     start: moment().toDate(), // new Date() obtenemos la fecha actual\r\n//     end: moment().add(2, 'hours').toDate(),\r\n//     notes: 'Comprar el pastel',\r\n//     user: {\r\n//         _id: '1234',\r\n//         name: 'Iván',\r\n//     }\r\n// }\r\n\r\n\r\n// Creamos un initalState con un array que serán los eventos, y un objeto que será el evento activo\r\nconst initialState = {\r\n\r\n    events: [],\r\n    activeEvent: null,\r\n\r\n\r\n}\r\n\r\n\r\n// Creamos el reducer\r\nexport const calendarReducer = ( state = initialState, action ) =>{\r\n\r\n\r\n    switch (action.type) {\r\n\r\n        case types.eventSetActive:\r\n            \r\n            // Modificamos el activeEvent en el store\r\n            return {\r\n                ...state,\r\n                activeEvent: action.payload,\r\n            };\r\n\r\n        case types.eventAddNew:\r\n\r\n            console.log('Nuevo evento')\r\n\r\n            // Modificamos el array de eventos en el store\r\n            return {\r\n                ...state,\r\n                events: [\r\n                    ...state.events,\r\n                    action.payload,\r\n                ]\r\n            }\r\n\r\n        case types.eventClearActiveEvent:\r\n\r\n            // Limpiamos el evento activo devolviendo un null\r\n            return {\r\n                ...state,\r\n                activeEvent: null,\r\n            }\r\n\r\n        case types.eventUpdate:\r\n\r\n            // Actualizamos un evento del listado\r\n            return {\r\n                ...state,\r\n                events: state.events.map(\r\n                    // Por cada evento comprobamos si su id coincide con el que nos llega en el payload\r\n                    // Si es el mismo, se actualiza, en caso contrario se toma el existente\r\n                    e => ( e.id === action.payload.id ) ? action.payload : e\r\n                )\r\n            }\r\n\r\n        case types.eventDelete:\r\n\r\n            // Eliminamos el evento activo\r\n            return {\r\n                ...state,\r\n                events: state.events.filter(\r\n                    // Filtramos el array devolviendo aquellos eventos que su id no coincide con el activo\r\n                    e => ( e.id !== state.activeEvent.id )\r\n                ),\r\n                activeEvent: null,\r\n            }\r\n\r\n        case types.eventLoaded:\r\n\r\n            // Cargamos los eventos en el store\r\n            return {\r\n                ...state,\r\n                events: [ ...action.payload ]\r\n            }\r\n\r\n        case types.eventLogout:\r\n\r\n            // Vaciamos los eventos del store cuando se haga logout\r\n            return {\r\n                ...state,\r\n                events: [],\r\n                activeEvent: null,\r\n            }\r\n    \r\n        default:\r\n\r\n            // Por defecto devolvemos el state\r\n            return state;\r\n\r\n    }\r\n\r\n}","import { types } from \"../types/types\";\r\n\r\n\r\n// Definimos una constante para establecer el estado inicial\r\nconst initialState = {\r\n    checking: true, // Variable para establecer si se está haciendo la consulta de estar logueado o no.\r\n    // uid: null,\r\n    // name: null,\r\n}\r\n\r\n// Hacemos la exportación del Reducer\r\nexport const authReducer = ( state = initialState, action ) => {\r\n\r\n    // Definimos el switch con todas las variables que nos podrían llegar\r\n    switch ( action.type ) {\r\n\r\n        // Almacenamos en el store los datos del usuario, y ponemos el checking en false porque ya hemos obtenido una respuesta\r\n        case types.authLogin:\r\n\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                checking: false,\r\n            }\r\n\r\n        // Al finalizar la consulta ponemos el checking en false\r\n        case types.authCheckingFinish:\r\n\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n            }\r\n\r\n        // Al hacer logout borramos el store\r\n        case types.authStartLogout:\r\n\r\n            return {\r\n                checking: false,\r\n            }\r\n\r\n        default:\r\n\r\n            // Por defecto devolvemos el state\r\n            return state;\r\n\r\n    }\r\n\r\n}","import { combineReducers } from \"redux\";\r\n\r\n\r\nimport { uiReducer } from \"./uiReducer\";\r\nimport { calendarReducer } from \"./calendarReducer\";\r\nimport { authReducer } from \"./authReducer\";\r\n\r\n\r\n// Combinamos los reducers en uno solo para utilizar Redux\r\nexport const rootReducer = combineReducers({\r\n    ui: uiReducer,\r\n    calendar: calendarReducer,\r\n    auth: authReducer,\r\n})\r\n\r\n","import { createStore, compose, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\nimport { rootReducer } from \"../reducers/rootReducer\";\r\n\r\n// ==============================================================\r\n//      Hay que usar el store en un nivel alto de la app, en CalendarApp.js\r\n// ==============================================================\r\n\r\n// función copiada de redux-devtools-extension\r\n// https://github.com/zalmoxisus/redux-devtools-extension\r\n// Hay que importar el compose de redux\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\n// Creamos el store de Redux\r\n// Le decimos el middleware que vamos a utilizar, que es Thunk\r\nexport const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware( thunk )\r\n    )\r\n)","import { useState } from \"react\"\r\n\r\nexport const useForm = ( initialState = {} ) => {\r\n    \r\n    // Creamos el setState para almacenar las variables, con el estado inicial que entre por la llamada\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    // Con este reset vamos a resetear los cambios\r\n    const reset = () => {\r\n        setValues(initialState)\r\n    }\r\n\r\n    // Creamos una función que nos vaya modificamos los archivos como los tenemos\r\n    const handleInputChange = ( { target } ) => {\r\n\r\n        setValues({\r\n            ...values,\r\n            [ target.name ]: target.value\r\n        });\r\n\r\n    };\r\n\r\n    // Retornamos los valores y la función que los modifica\r\n    return [ values, handleInputChange, reset ];\r\n\r\n\r\n\r\n}","\r\n\r\n// Tomamos la url base del enviroment\r\nconst baseUrl = process.env.REACT_APP_API_URL\r\n\r\n\r\n// Creamos un fecth en el que no vamos a usar el token\r\n// Va a recibir el argumento, por ejemplo '/auth', que será el endpoint\r\n// Luego va la data, y por úlitmo el método, que si no viene usaremos el GET por defecto\r\nconst fetchSinToken = ( endpoint, data, method = 'GET' ) => {\r\n\r\n    // Montamos la url completa y la pasamos a una variable\r\n    const url = `${ baseUrl }/${ endpoint }`; // localhost:4010/api/\r\n\r\n    // Si el método es un GET lo lanzamos directamente\r\n    if ( method === 'GET' ) {\r\n\r\n        return fetch( url );\r\n\r\n    } else {\r\n\r\n        // Si no es un GET, tendremos que pasarle más configuraciones\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n            },\r\n            body: JSON.stringify( data ),\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n// Creamos una función para hacer el fecth, pero esta vez con token\r\nconst fetchConToken = ( endpoint, data, method = 'GET' ) => {\r\n\r\n    // Montamos la url completa y la pasamos a una variable\r\n    const url = `${ baseUrl }/${ endpoint }`; // localhost:4010/api/\r\n\r\n    // Obtenemos el token del local storage para comprobar si es válido\r\n    // Si viniese un null, ponemos las '' para mandar un string vacío por defecto y evitar el null\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    // Si el método es un GET lo lanzamos añadiendo los headers\r\n    if ( method === 'GET' ) {\r\n\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'x-token': token,\r\n            }\r\n        } );\r\n\r\n    } else {\r\n\r\n        // Si no es un GET, tendremos que pasarle más configuraciones\r\n        return fetch( url, {\r\n            method,\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                'x-token': token,\r\n            },\r\n            body: JSON.stringify( data ),\r\n        });\r\n\r\n    }\r\n\r\n}\r\n\r\n// Exportamos las funciones\r\nexport {\r\n    fetchSinToken,\r\n    fetchConToken\r\n}","import moment from \"moment\";\r\n\r\n\r\n// Creamos una función para transformar las fechas de los eventos de string a date\r\nexport const prepareEvents = ( events ) => {    \r\n    \r\n    // pasamos todos los eventos por un .map para ir haciendo los cambios\r\n    return events.map(\r\n\r\n        // Por cada evento e hacemos lo siguiente\r\n        (e) => ({\r\n            ...e,\r\n            end: moment( e.end ).toDate(),\r\n            start: moment( e.start).toDate(),\r\n        })\r\n        \r\n    );\r\n\r\n}","import Swal from \"sweetalert2\";\r\n\r\n\r\nimport { fetchConToken } from \"../helpers/fetch\";\r\nimport { prepareEvents } from \"../helpers/prepare-events\";\r\nimport { types } from \"../types/types\";\r\n\r\n\r\nexport const eventStartAddNew = ( event ) => {\r\n\r\n    return async ( dispatch, getState )  => {\r\n\r\n        // Tomamos el state auth del store y lo desestructuramos para utilizar la información\r\n        const { uid, name } = getState().auth;\r\n\r\n        try {\r\n\r\n            // Hacemos la petición de grabación en la base de datos y almacenamos la respuesta en una variable\r\n            const resp = await fetchConToken( 'events', event, 'POST');\r\n            const body = await resp.json()\r\n\r\n            if ( body.ok ) {\r\n\r\n                // Hacemos dispatch del evento para introducirlo en el store\r\n                event.id = body.evento.id;\r\n                // Los datos del user los obtenemos del store\r\n                event.user = {\r\n                    id: uid,\r\n                    name: name,\r\n                }\r\n\r\n                // Hacemos el dispatch del evento para pasarlo al store\r\n                dispatch( eventAddNew( event ) );\r\n\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n\r\n    }\r\n\r\n}\r\n\r\n// Action para añadir un nuevo evento al store\r\n// Solo lo vamos a utilizar aquí, así que no es necesario exportarlo\r\nconst eventAddNew = ( event ) => ({\r\n    type: types.eventAddNew,\r\n    payload: event,\r\n});\r\n\r\n// Action para establecer el evento activo en el store\r\nexport const eventSetActive = ( event ) => ({\r\n    type: types.eventSetActive,\r\n    payload: event,\r\n});\r\n\r\n// ACtion para limpiar el evento activo en el store\r\nexport const eventClearActiveEvent = () => ({ type: types.eventClearActiveEvent });\r\n\r\n// Action para empezar a actualizar el evento en la DB\r\nexport const eventStartUpdate = ( event ) => {\r\n\r\n    return async ( dispatch ) => {\r\n\r\n        // Hacemos un try/catch para lanzar la actualización a la DB\r\n        try {\r\n\r\n            // Lanzamos la peticion con el endpoint, la información, y el tipo de petición\r\n            // Almacenamos la respuesta en una variable y la transformamos en un json\r\n            const resp = await fetchConToken( `events/${ event.id }`, event, 'PUT' );\r\n            const body = await resp.json();\r\n\r\n            if ( body.ok ) {\r\n                \r\n                // Si todo salió bien, hacemos el dispatch de la acción para actualizarlo en el Store\r\n                dispatch( eventUpdated( event ) );\r\n\r\n            } else {\r\n\r\n                // En caso contrario activamos un mensaje de error\r\n                Swal.fire('Error', body.msg, 'error' );\r\n\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log( error );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// Action para actualizar el evento\r\nexport const eventUpdated = ( event ) => ({\r\n    type: types.eventUpdate,\r\n    payload: event,\r\n});\r\n\r\n\r\n// Función para empezar el borrado del evento de la DB\r\nexport const eventStartDelete = () => {\r\n\r\n    // Extraemos el estado del store para tener la información del evento a borrar con getState\r\n    return async ( dispatch, getState ) => {\r\n\r\n        // Desestrucutramos el id del evento activo en el store\r\n        const { id } = getState().calendar.activeEvent;\r\n\r\n        try {\r\n            \r\n            // Lanzamos la petición a la DB con el endpoint y el tipo de petición\r\n            const resp = await fetchConToken( `events/${ id }`, {}, 'DELETE');\r\n            const body = await resp.json();\r\n\r\n            if ( body.ok ) {\r\n\r\n                // Si todo fue bien borramos el evento del store\r\n                dispatch( eventDelete() );\r\n\r\n            } else {\r\n\r\n                // En caso contrario lanzamos un mensaje de error\r\n                Swal.fire('Error', body.msg, 'error' );\r\n\r\n            }\r\n            \r\n        } catch (error) {\r\n            console.log( error );\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// Action para borrar el evento\r\nconst eventDelete = () => ({ type: types.eventDelete });\r\n\r\n// Función para empezar la carga de eventos desde la DB\r\nexport const eventStartLoading = () => {\r\n\r\n    return async ( disptach ) => {\r\n\r\n        try {\r\n\r\n            // Lanzamos la petición del get eventos a la DB. Al ser una petición GET solo hay que pasar el endpoint\r\n            const resp = await fetchConToken( 'events' );\r\n            const body = await resp.json();\r\n\r\n            // Almacenamos los eventos en una variable, tras pasarlos por el helper\r\n            const events = prepareEvents( body.eventos );\r\n\r\n            // Hacemos el dispatch de los eventos recibidos para cargar en el store\r\n            disptach( eventLoaded( events ) );\r\n            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\n// Acción para cargar los eventos en el store\r\nconst eventLoaded = ( events ) => ({\r\n\r\n    type: types.eventLoaded,\r\n    payload: events,\r\n    \r\n});\r\n\r\n// Creamos una acción para borrar los eventos del store\r\nexport const eventLogout = () => ({ type: types.eventLogout });","import Swal from \"sweetalert2\";\r\n\r\n\r\nimport { fetchConToken, fetchSinToken } from \"../helpers/fetch\"\r\nimport { types } from \"../types/types\";\r\nimport { eventLogout } from \"./events\";\r\n\r\n\r\n// Definimos la acción para hacer el login\r\nexport const startLogin = ( email, password ) => {\r\n\r\n    // Hacemos un return para que sea una funcion asíncrona\r\n    return async ( dispatch ) => {\r\n\r\n        // console.log(email, password);\r\n        \r\n        // Hacemos una petición de fechtSinToken pasándole todos los datos que necesita\r\n        // Y almacenamos la respuesta en una variable\r\n        const resp = await fetchSinToken( 'auth', { email, password }, 'POST' );\r\n        const body = await resp.json();\r\n\r\n        console.log(body);\r\n\r\n        // Si la respuesta nos devuelve un OK true, es que todo ha ido bien. Lo almacenamos en el localstorage\r\n        if( body.ok ) {\r\n\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            // Hacemos el dispatch de la acción\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name,\r\n            }) );\r\n\r\n        } else {\r\n\r\n            // Si hay algún problema con la autenticación devolvemos un error\r\n            // En el cuerpo ponemos el body.msg, que nos viene del backend\r\n            Swal.fire('Error', body.msg, 'error');\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// Definimos la acción para hacer el register\r\nexport const startRegister = ( email, password, name ) => {\r\n\r\n    return async ( dispatch ) => {\r\n\r\n        // Hacemos una petición de fechtSinToken pasándole todos los datos que necesita\r\n        // Y almacenamos la respuesta en una variable\r\n        const resp = await fetchSinToken( 'auth/new', { email, password, name }, 'POST' );\r\n        const body = await resp.json();\r\n\r\n        console.log(body);\r\n\r\n        // Si la respuesta nos devuelve un OK true, es que todo ha ido bien. Lo almacenamos en el localstorage\r\n        if( body.ok ) {\r\n\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            // Hacemos el dispatch de la acción\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name,\r\n            }) );\r\n\r\n        } else {\r\n\r\n            // Si hay algún problema con la autenticación devolvemos un error\r\n            // En el cuerpo ponemos el body.msg, que nos viene del backend\r\n            Swal.fire('Error', body.msg, 'error');\r\n\r\n        }\r\n\r\n    } \r\n\r\n}\r\n\r\n// Con esta acción haremos la comprobación de si el token es válido o no\r\nexport const startChecking = () => {\r\n\r\n    return async ( dispatch ) => {\r\n\r\n        // Hacemos una petición de fetchConToken y en este caso no necesitamos pasarle ningún dato\r\n        // Renovamos el token y  almacenamos la respuesta en una variable\r\n        const resp = await fetchConToken( 'auth/renew' );\r\n        const body = await resp.json();\r\n\r\n        console.log('start checking');\r\n\r\n        console.log(body);\r\n\r\n        // Si la respuesta nos devuelve un OK true, es que todo ha ido bien. Lo almacenamos en el localstorage\r\n        if( body.ok ) {\r\n\r\n            localStorage.setItem('token', body.token);\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            // Hacemos el dispatch de la acción\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name,\r\n            }) );\r\n\r\n        } else {\r\n\r\n            //Si hubo algún error, o el token no es válido lanzamos la acción de finalizar el checking\r\n            dispatch( checkingFinish() );\r\n\r\n        }\r\n    }\r\n}\r\n\r\n// Creamos una acción para finalizar el checking del token\r\nconst checkingFinish = ( user ) => ({ type: types.authCheckingFinish, });\r\n\r\n// Creamos una acción directamente, y la ponemos entre paréntesis para exportarla\r\nconst login = ( user ) => ({\r\n\r\n    type: types.authLogin,\r\n    payload: user\r\n    \r\n});\r\n\r\n// Creamos la función para hacer el logout del calendario\r\nexport const startLogout = () => {\r\n\r\n    return ( dispatch ) => {\r\n\r\n        // Borramos la información del localstorage\r\n        localStorage.clear();\r\n\r\n        // Hacemos el dispatch de la acción que borrará los datos de eventos del store\r\n        dispatch( eventLogout() );\r\n\r\n        // Hacemos el disptach de la acción que borrará los datos del store\r\n        dispatch( logout() );\r\n\r\n    }\r\n\r\n}\r\n\r\n// Creamos una acción para borrar los datos del storage\r\nconst logout = () => ({ type: types.authStartLogout });","// ============================================\r\n//   Pantalla copiada del github del profesor\r\n// ============================================\r\n\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport './login.css';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nimport { useForm } from \"../../hooks/useForm\";\r\nimport { startLogin, startRegister } from '../../actions/auth';\r\n\r\n\r\nexport const LoginScreen = () => {\r\n\r\n    // Declaramos la variable dispatch para lanzar las acciones al store\r\n    const dispatch = useDispatch();\r\n\r\n    // Esta variable la utilizaremos en nuestro custom hook useForm.js, pero el initialState lo establecemos directamente\r\n    const [ formLoginValues, handleLoginInputChange ] = useForm ({ \r\n\r\n        lEmail: 'exquemelin@gmail.com',\r\n        lPassword: '123456',\r\n\r\n    });\r\n\r\n    // Variable para manejar el registro de un usuario\r\n    // Esta variable la utilizaremos en nuestro custom hook useForm.js, pero el initialState lo establecemos directamente\r\n    const [ formRegisterValues, handleRegisterInputChange ] = useForm ({ \r\n\r\n        rName: 'Iván',\r\n        rEmail: 'exquemelin@gmail.com',\r\n        rPassword1: '123456',\r\n        rPasswrod2: '123456',\r\n\r\n    });\r\n\r\n    // Desestructuramos las variables del registro.\r\n    const { rName, rEmail, rPassword1, rPasswrod2 } = formRegisterValues;\r\n\r\n    // Extraemos las variables del state del login\r\n    const { lEmail, lPassword } = formLoginValues;\r\n\r\n    // Definimos el método para hacer el login con los datos introducidos en el formulario\r\n    const handleLogin = ( e ) => {\r\n\r\n        e.preventDefault();\r\n\r\n        // Hacemos el dispatch de la acción para empezar a hacer el login\r\n        dispatch( startLogin( lEmail, lPassword ) );\r\n\r\n    }\r\n\r\n    // Definimos el método para hacer el registro con los datos introducidos en el formulario\r\n    const handleRegister = ( e ) => {\r\n\r\n        e.preventDefault();\r\n\r\n        // Vamos a coprobar si los dos password son iguales, y lanzamos un error\r\n        if ( rPassword1 !== rPasswrod2 ) {\r\n\r\n            //Al no serlo lanzamos la alerta.\r\n            Swal.fire('Error', 'Las contraseñas deben ser iguales', 'error' );\r\n\r\n        }\r\n\r\n        // Hacemos el dispatch de la acción para empezar a hacer el login\r\n        dispatch( startRegister( rEmail, rPassword1, rName ) );\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container login-container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 login-form-1\">\r\n                    <h3>Ingreso</h3>\r\n                    <form onSubmit={ handleLogin }>\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"lEmail\"\r\n                                value={ lEmail }\r\n                                onChange={ handleLoginInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\"\r\n                                name=\"lPassword\"\r\n                                value={ lPassword }\r\n                                onChange={ handleLoginInputChange }\r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"submit\"\r\n                                className=\"btnSubmit\"\r\n                                value=\"Login\" \r\n                            />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div className=\"col-md-6 login-form-2\">\r\n                    <h3>Registro</h3>\r\n                    <form onSubmit={ handleRegister }>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"text\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Nombre\"\r\n                                name=\"rName\"\r\n                                value={ rName }\r\n                                onChange={ handleRegisterInputChange } \r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"email\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Correo\"\r\n                                name=\"rEmail\"\r\n                                value={ rEmail }\r\n                                onChange={ handleRegisterInputChange } \r\n                            />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Contraseña\" \r\n                                name=\"rPassword1\"\r\n                                value={ rPassword1 }\r\n                                onChange={ handleRegisterInputChange } \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input\r\n                                type=\"password\"\r\n                                className=\"form-control\"\r\n                                placeholder=\"Repita la contraseña\" \r\n                                name=\"rPasswrod2\"\r\n                                value={ rPasswrod2 }\r\n                                onChange={ handleRegisterInputChange } \r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"form-group\">\r\n                            <input \r\n                                type=\"submit\" \r\n                                className=\"btnSubmit\" \r\n                                value=\"Crear cuenta\" />\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\n\r\nimport { startLogout } from '../../actions/auth';\r\n\r\n\r\nexport const Navbar = () => {\r\n\r\n    // Declaramos la variable dispatch para utilizarla\r\n    const dispatch = useDispatch();\r\n\r\n    // Extraemos el nombre del store para mostrarlo en el navbar\r\n    const { name } = useSelector( state => state.auth );\r\n\r\n    // Definimos la función que lanzaremos cuando se pulse sobre el Logout\r\n    const handleLogout = () => {\r\n\r\n        // Hacemos el dispatch de la función de Logout\r\n        dispatch( startLogout() );\r\n\r\n    };\r\n\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n\r\n            <span className=\"navbar-brand\">\r\n                { name }\r\n            </span>\r\n\r\n            <button \r\n                className=\"btn btn-outline-danger\"\r\n                onClick={ handleLogout }\r\n            >\r\n                <i className=\"fas fa-sign-out-alt\" ></i>\r\n                <span> Salir </span>\r\n            </button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","export const messages = {\r\n    allDay: 'Todo el día',\r\n    previous: '<',\r\n    next: '>',\r\n    today: 'Hoy',\r\n    month: 'Mes',\r\n    week: 'Semana',\r\n    day: 'Día',\r\n    agenda: 'Agenda',\r\n    date: 'Fecha',\r\n    time: 'Hora',\r\n    event: 'Evento',\r\n    noEventsInRange: 'No hay eventos en este rango',\r\n    showMore: total => `+ Ver más (${total})`\r\n};","import React from 'react'\r\n\r\nexport const CalendarEvent = ({ event }) => {\r\n\r\n    // Desestructuramos el event\r\n    const { title, user } = event;\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <span> { title } </span>\r\n            <strong>- { user.name } </strong>\r\n        </div>\r\n    )\r\n}\r\n","import { types } from \"../types/types\";\r\n\r\n\r\n// Action para abrir el modal\r\nexport const uiOpenModal = () => ({ type: types.uiOpenModal });\r\n\r\n// Action para cerrar el modal\r\nexport const uiCloseModal = () => ({ type: types.uiCloseModal });\r\n\r\n","import React, { useEffect, useState } from 'react'\r\nimport Modal from 'react-modal';\r\nimport DateTimePicker from 'react-datetime-picker';\r\nimport moment from 'moment';\r\nimport Swal from 'sweetalert2'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nimport { uiCloseModal } from '../../actions/ui';\r\nimport { eventAddNew, eventClearActiveEvent, eventStartAddNew, eventStartUpdate, eventUpdated } from '../../actions/events';\r\n\r\n\r\n// Copiado de la web npm del package\r\n// Style para el modal\r\nconst customStyles = {\r\n    content : {\r\n      top                   : '50%',\r\n      left                  : '50%',\r\n      right                 : 'auto',\r\n      bottom                : 'auto',\r\n      marginRight           : '-50%',\r\n      transform             : 'translate(-50%, -50%)'\r\n    }\r\n}\r\n\r\n// Copiado de la web npm del package\r\n// Make sure to bind modal to your appElement (http://reactcommunity.org/react-modal/accessibility/)\r\n// Tenemos que pasarle el elemento de nuestro index.html, es el #root\r\nModal.setAppElement('#root')\r\n\r\n// varialbe para tomar la fecha inicial de un evento\r\n// tomando la hora actual con minutos y segundos en 0 y añadiendo una hora\r\nconst now = moment().minutes(0).seconds(0).add(1, 'hours');\r\n\r\n// varialbe para poner la fecha final de un evento\r\nconst nowPlus1 = now.clone().add(1, 'hours');\r\n\r\nconst initEvent = {\r\n    title: '',\r\n    notes: '',\r\n    start: now.toDate(),\r\n    end: nowPlus1.toDate(),\r\n}\r\n\r\n// Modal para el Calendar que vamos a crear\r\nexport const CalendarModal = () => {\r\n\r\n    // Control de fechas por medio de useState\r\n    const [dateStart, setDateStart] = useState( now.toDate() )\r\n    const [dateEnd, setDateEnd] = useState( nowPlus1.toDate() )\r\n\r\n    // Creamos un useState para el control de los datos del evento\r\n    const [formValues, setFormValues] = useState( initEvent );\r\n\r\n    // useState para almacenar si el formulario es válido\r\n    const [titleValid, setTitleValid] = useState( true );\r\n\r\n    // Extraemos las notes y el title del formValues para usarlo en el modal\r\n    // Extraemos el start y el end para hacer una validación\r\n    const { notes, title, start, end } = formValues;\r\n\r\n    // Declaramos la variable dispatch para realizar nuestros dispatch\r\n    const dispatch = useDispatch();\r\n\r\n    // Extraemos el state.ui del Store y nos quedamos con el modalOpen\r\n    const { modalOpen } = useSelector(state => state.ui)\r\n\r\n    // Extraemos el state.calendar del Store y nos quedamos con el activeEvent\r\n    const { activeEvent } = useSelector(state => state.calendar)\r\n\r\n    // Creamos una función para cambiar el valor de una variable input\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        // Le pasamos al useState la variable target, extraída del global de info del input\r\n        // Será el title o el notes\r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value,\r\n        })\r\n\r\n    }\r\n\r\n    // Establecemos un useEffect para controlar cuando cambia el elemento activo y cargar sus datos en el modal\r\n    useEffect(() => {\r\n\r\n        // Hay un momento que es null, y no lo podemos cargar al useState correspondiente\r\n        if ( activeEvent ) {\r\n            setFormValues( activeEvent );\r\n        } else {\r\n            setFormValues( initEvent );\r\n        }\r\n               \r\n    }, [activeEvent, setFormValues]); // Establecemos como dependencias lo que cambia dentro\r\n    \r\n    // Función que se disparará cuando se quiera cerrar el modal\r\n    const closeModal = () => {\r\n\r\n        // Cerramos el modal poniendo la variable del store [ui] en false\r\n        dispatch( uiCloseModal() );\r\n\r\n        // Limpiamos el evento activo del store\r\n        dispatch( eventClearActiveEvent() );\r\n\r\n        // Reestablecemos el formValues a su estado inicial\r\n        // Así cuando se abra el modal estará limpio\r\n        setFormValues( initEvent );\r\n        \r\n    }\r\n\r\n    // Función para el resultado del datepicker para la fecha y hora inicial\r\n    const handleStartDateChange = ( e ) => {\r\n\r\n        // Modificamos la fecha de inicio, controlada por el useState\r\n        setDateStart( e );\r\n\r\n        // Modificamos la fecha de inicio en el evento\r\n        setFormValues({\r\n            ...formValues,\r\n            start: e\r\n        });\r\n\r\n    }\r\n\r\n    // Función para el resultado del datepicker para la fecha y hora final\r\n    const handleEndDateChange = ( e ) => {\r\n\r\n        // Modificamos la fecha final, controlada por el useState\r\n        setDateEnd( e );\r\n\r\n        // Modificamos la fecha de final en el evento\r\n        setFormValues({\r\n            ...formValues,\r\n            end: e\r\n        });\r\n\r\n    }\r\n\r\n    // Función para guardar el formulario cuando se lance el submit\r\n    const handleSubmitForm = ( e ) => {\r\n\r\n        // Prevenimos la propagación del formulario\r\n        e.preventDefault();\r\n\r\n        console.log( formValues );\r\n\r\n        // Transformarmos la fecha de inicio y fin en formato moment para hacer la validación\r\n        const momentStart = moment( start );\r\n        const momentEnd = moment( end );\r\n\r\n        // Si la fecha final no es mayor que la incial lanzamos una alerta de Sweet Alert 2\r\n        if ( momentStart.isSameOrAfter( momentEnd) ) {\r\n            \r\n            return Swal.fire('Error', 'La fecha fin debe de ser mayor a la fecha de inicio', 'error');\r\n\r\n        }\r\n\r\n        // Si el título no contiene al menos dos caracteres no lo validaremos\r\n        if ( title.trim().length < 2 ) {\r\n\r\n            // ponemos la variale del useState en false\r\n            return setTitleValid( false );\r\n\r\n        } \r\n\r\n        // Si tenemos un evento activo quiere decir que estamos editando, si es null es uno nuevo\r\n        if ( activeEvent ) {\r\n\r\n            // Hacemos el dispatch para actualizar el evento en el store\r\n            dispatch( eventStartUpdate( formValues ));\r\n            \r\n        } else {\r\n\r\n            //TODO: realizar grabación en DB\r\n            // Hacemos el dispatch para añadir el nuevo evento al store\r\n            // Usamos el operador spread para extraer todos los datos y poder añadir un id\r\n            // dispatch( eventAddNew({\r\n            //     ...formValues,\r\n            //     id: new Date().getTime(),\r\n            //     user: {\r\n            //         _id: '123',\r\n            //         name: 'Iván'\r\n            //     }\r\n            // }) )\r\n            \r\n            // Ahora la grabación la haremos haciendo el dispatch de una acción de inicio de grabación\r\n            dispatch( eventStartAddNew( formValues ));\r\n\r\n        }\r\n\r\n\r\n        // Si el title es válido, ponemos el estado en true\r\n        setTitleValid( true );\r\n\r\n        // Si todo es válido, cerramos el modal\r\n        closeModal();\r\n\r\n    }\r\n    \r\n    return (\r\n\r\n        <Modal\r\n            isOpen={ modalOpen } // Muestra u oculta el modal\r\n        //   onAfterOpen={ afterOpenModal }\r\n            onRequestClose={ closeModal } // Se dispara cuando se quiere cerrar pinchando fuera de él\r\n            style={ customStyles } // Style del modal que ya hemos creado/copiado\r\n            closeTimeoutMS={ 2000 } // Tiempo para ocultarse\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-fondo\"\r\n        >\r\n\r\n            {/* Código de puro html copiado del gishub del profesor */}\r\n            <h1> { (activeEvent) ? activeEvent.title : 'Nuevo evento' } </h1>\r\n            <hr />\r\n            <form \r\n                className=\"container\"\r\n                onSubmit={ handleSubmitForm }\r\n            >\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Fecha y hora inicio</label>\r\n                    <DateTimePicker\r\n                        onChange={ handleStartDateChange }\r\n                        value={ dateStart }\r\n                        className=\"form-control\"\r\n                    />                \r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label>Fecha y hora fin</label>\r\n                    <DateTimePicker\r\n                        onChange={ handleEndDateChange }\r\n                        value={ dateEnd }\r\n                        minDate={ dateStart }\r\n                        className=\"form-control\"\r\n                    />                \r\n                </div>\r\n\r\n                <hr />\r\n                <div className=\"form-group\">\r\n                    <label>Titulo y notas</label>\r\n                    <input \r\n                        type=\"text\" \r\n                        className={`form-control ${ !titleValid && 'is-invalid' } `} // Si el title no es válido, añadimos una classname para informar\r\n                        placeholder=\"Título del evento\"\r\n                        name=\"title\"\r\n                        autoComplete=\"off\"\r\n                        value={ title }\r\n                        onChange={ handleInputChange }\r\n                    />\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <textarea \r\n                        type=\"text\" \r\n                        className=\"form-control\"\r\n                        placeholder=\"Notas\"\r\n                        rows=\"5\"\r\n                        name=\"notes\"\r\n                        value={ notes }\r\n                        onChange={ handleInputChange }\r\n                    ></textarea>\r\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\r\n                </div>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-outline-primary btn-block\"\r\n                >\r\n                    <i className=\"far fa-save\"></i>\r\n                    <span> Guardar</span>\r\n                </button>\r\n\r\n            </form>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\nimport { uiOpenModal } from '../../actions/ui'\r\nimport { eventClearActiveEvent } from '../../actions/events'\r\n\r\n\r\n// Creamos un Floting Action Button, con una clase fab personalizada\r\n// Y llevará un icono \r\nexport const AddNewFab = () => {\r\n\r\n    // Creamos una variable dispatch para modificar el store\r\n    const dispatch = useDispatch()\r\n\r\n    // Creamos una función que se disparará cuando se habla click en el button\r\n    const handleFAB = () => {\r\n\r\n        // Hacemos el dispatch para limpiar el elemento activo para que abra el modal vacío\r\n        dispatch( eventClearActiveEvent() );\r\n\r\n        // Hacemos el dispatch para activar el modal\r\n        dispatch( uiOpenModal() );\r\n\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"btn btn-primary fab\"\r\n            onClick={ handleFAB }\r\n        >\r\n            <i className=\"fas fa-plus\"></i>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux';\r\n\r\n\r\nimport { eventStartDelete } from '../../actions/events';\r\n\r\n\r\nexport const DeleteEventFab = () => {\r\n\r\n    // Declaramos el dispatch para lanzar acciones\r\n    const dispatch = useDispatch();\r\n\r\n    // Función disparada por el botón\r\n    const handleFAB = () =>{\r\n\r\n        // Hacemos el dispatch de la acción de borrado del evento\r\n        dispatch( eventStartDelete() );\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className=\"btn btn-danger fab-danger\"\r\n            onClick={ handleFAB }\r\n        >\r\n            <i className=\"fas fa-trash\"></i>\r\n            <span> Borrar evento </span>\r\n        </button>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport moment from 'moment';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\nimport { Navbar } from '../ui/Navbar';\r\nimport { messages } from '../../helpers/calendar-messages-es';\r\nimport { CalendarEvent } from './CalendarEvent';\r\nimport { CalendarModal } from './CalendarModal';\r\nimport { uiOpenModal } from '../../actions/ui';\r\nimport { eventClearActiveEvent, eventSetActive, eventStartLoading } from '../../actions/events';\r\nimport { AddNewFab } from '../ui/AddNewFab';\r\n\r\n\r\n// Importaciones de moment para pasar la configuración del idioma a español\r\nimport 'moment/locale/es';\r\n\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\nimport { DeleteEventFab } from '../ui/DeleteEventFab';\r\nimport { useEffect } from 'react';\r\n\r\n\r\n// Le decimos a moment el idioma a utilizar\r\nmoment.locale('es');\r\n\r\n// constante copiada de la documentación de big calendar, pero haciendo desestructuración de la importación del package\r\nconst localizer = momentLocalizer(moment); // or globalizeLocalizer\r\n\r\n// // Array con los eventos. En este caso uno creado a mano\r\n// // Tiene algunos datos que son obligatorios title, start y end\r\n// const events = [{\r\n//     title: 'Cumpleaños del jefe',\r\n//     start: moment().toDate(), // new Date() obtenemos la fecha actual\r\n//     end: moment().add(2, 'hours').toDate(),\r\n//     bgcolor: '#fafafa',\r\n//     notes: 'Comprar el pastel',\r\n//     user: {\r\n//         _id: '1234',\r\n//         name: 'Iván',\r\n//     }\r\n// }];\r\n\r\nexport const CalendarScreen = () => {\r\n    \r\n    // Declaramos la variable dispatch para lanzar las acciones al store\r\n    const dispatch = useDispatch();\r\n\r\n    // hacemos un useState para controlar la vista en la que nos encontramos\r\n    // Si no hay nada en el localStorage, le decimos que tome 'month' como defecto\r\n    const [lastView, setlastView] = useState( localStorage.getItem('lastView') || 'month' );\r\n\r\n    // Obtenemos del store todos los eventos que tenemos\r\n    // Obtenemos el activeEvent\r\n    const { events, activeEvent } = useSelector(state => state.calendar);\r\n\r\n    // Obtenemos la información del usuario del store\r\n    const { uid } = useSelector( state => state.auth );\r\n\r\n    // Utilizamos el useEffect para ver cuando se carga el calendario y solicitar los eventos a la dB\r\n    useEffect(() => {\r\n        \r\n        // Hacemos el dispatch de la carga de los eventos\r\n        dispatch( eventStartLoading() );\r\n        \r\n    }, [ dispatch ]);\r\n\r\n    // Función que se lanzará cuando se haga doble click sobre un evento\r\n    const onDoubleClick = (e) => {\r\n\r\n        // Tenemos que abrir el modal. Para ello cambiamos la variable del Store de [ui] en true\r\n        dispatch( uiOpenModal() );\r\n\r\n        console.log('Open Modal');\r\n        \r\n    };\r\n\r\n    // Función que se lanzará cuando se haga un solo click sobre un evento\r\n    const onSeletectEvent = (e) => {\r\n\r\n        // Hacemos el dispatch del event para ponerlo en el store como evento activo\r\n        dispatch( eventSetActive( e ) );\r\n        \r\n    };\r\n\r\n    // Función que se lanzará cuando se cambie la vista\r\n    const onViewChange = (e) => {\r\n\r\n        // Pasamos la vista al State\r\n        setlastView(e);\r\n\r\n        // Almacenamos en el localStorage la última vista utilizada\r\n        localStorage.setItem('lastView', e);\r\n;\r\n    }\r\n\r\n    // Función que se dispara cuando hacemos click en cualquier punto del calendario\r\n    const onSelecSlot = ( e ) => {\r\n\r\n        // Hacemos el dispatch de la acción para limpiar el elemento activo\r\n        dispatch( eventClearActiveEvent() );\r\n\r\n    }\r\n\r\n    // Función para establecer el estilo de los eventos en el calendario\r\n    // Esta función se dispara con algunas propiedades\r\n    const eventStyleGetter = ( event, start, end, isSelected ) => {\r\n\r\n        // Creamos una variable con un estilo del tipo css\r\n        const style = {\r\n            backgroundColor: ( uid === event.user._id ) ? '#367CF7' : '#455660',\r\n            borderRadius: '5px',\r\n            opacity: 0.8,\r\n            display: 'block',\r\n            color: 'white'\r\n        };\r\n        \r\n        // Devolvemos un objeto que llamaremos style con el estilo para el evento\r\n        return {\r\n            style\r\n        };\r\n\r\n    };\r\n    \r\n    return (\r\n        <div className=\"calendar-screen\">\r\n            <Navbar />\r\n\r\n            <Calendar\r\n                localizer={ localizer }\r\n                events={ events }\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                messages={ messages }\r\n                eventPropGetter={ eventStyleGetter } //Le pasamos la variables donde están los mensajes en español\r\n                onDoubleClickEvent={ onDoubleClick }\r\n                onSelectEvent={ onSeletectEvent }\r\n                onView={ onViewChange }\r\n                onSelectSlot={ onSelecSlot } // Función para eliminar el evento activo al tocar fuera del evento\r\n                selectable={ true } // Tenemos que ponerlo en true para usar el onSelectSlot\r\n                view={ lastView }\r\n                components={{ // Le decimos el componente que queremos utilizar\r\n                    event: CalendarEvent\r\n                }}\r\n            />\r\n\r\n            {\r\n                ( activeEvent ) && <DeleteEventFab /> \r\n            }\r\n\r\n            <AddNewFab />\r\n\r\n            <CalendarModal />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// Elemento con props que vamos a necesitar\r\nexport const PublicRoute = ({\r\n    isLoggedIn,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n    // Si está autenticado lo redirigimos al raíz, si no, lo llevamos al login\r\n    return (\r\n        <Route { ...rest }\r\n            component={ ( props ) => (\r\n                (isLoggedIn)\r\n                    ? ( <Redirect to=\"/\" /> )\r\n                    : ( <Component { ...props } /> )\r\n            )}\r\n        />\r\n    )\r\n\r\n}\r\n\r\n// Declaramos las proptypes que tenemos que pasar\r\nPublicRoute.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired,\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router-dom'\r\n\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n// Desestructuramos las props que tenemos que pasar\r\n// ...rest es el resgo de propiedades como el exact, el to, etc del Route que necesitamos\r\nexport const PrivateRoute = ({\r\n    isLoggedIn,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n\r\n    // Comprobamos si está autenticado o no. Si no lo está lo llevamos al login\r\n    return (\r\n        <Route { ...rest }\r\n            component={ ( props ) => (\r\n                ( isLoggedIn )\r\n                    ? (<Component { ...props } />)\r\n                    : (<Redirect to=\"/auth/login\" />)\r\n            )}\r\n        />\r\n    )\r\n\r\n}\r\n\r\n// Establecemos los PropTypes que debemos pasar\r\nPrivateRoute.propTypes = {\r\n    isLoggedIn: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired,\r\n}\r\n","import React, { useEffect } from 'react'\r\n\r\n// Importamos ReadDom para gestionar las rutas. Se copia de la web\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n  } from \"react-router-dom\";\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n  \r\n  \r\nimport { LoginScreen } from '../auth/LoginScreen';\r\nimport { CalendarScreen } from '../calendar/CalendarScreen';\r\nimport { startChecking } from '../../actions/auth';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { PrivateRoute } from './PrivateRoute';\r\n\r\n\r\nexport const AppRouter = () => {\r\n\r\n    // Declaramos la variable dispatch para utilizarla\r\n    const dispatch = useDispatch();\r\n\r\n    // Tomtamos el valor de checking y del uid desde el store\r\n    const { checking, uid } = useSelector( state => state.auth );\r\n\r\n    // Con el useEffect disparamos el dispatch para que haga el checking\r\n    useEffect(() => {\r\n\r\n        // Hacemos el disptach de la accion que comprueba si el token almacenado es válido\r\n        dispatch( startChecking() );\r\n\r\n    }, [dispatch]);\r\n\r\n    // Si estamos comprobando lanzamos un mensaje de espera\r\n    if ( checking ) {\r\n        return (<h5>Espere ....</h5>);\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n\r\n                    <PublicRoute\r\n                        exact\r\n                        path=\"/login\"\r\n                        component={ LoginScreen }\r\n                        isLoggedIn={ !!uid } // Usamos la doble negación porque \"uid\" no es nulo, con una negación \"!uid\" nos da false, con doble \"!!uid\" nos da true\r\n                    />\r\n\r\n                    {/* <Route exact path=\"/login\" component={ LoginScreen } /> */}\r\n                    <PrivateRoute \r\n                        exact \r\n                        path=\"/\" \r\n                        component={ CalendarScreen } \r\n                        isLoggedIn={ !!uid }  // En este caso si no hay nada, la doble negación nos devolverá false\r\n                    />\r\n\r\n                    <Redirect to=\"/login\" />\r\n\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\n\r\n\r\nimport { store } from './store/store';\r\nimport { AppRouter } from './components/routers/AppRouter';\r\n\r\n\r\nexport const CalendarApp = () => {\r\n    return (\r\n        <Provider store={ store }>\r\n            <AppRouter />\r\n        </Provider>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport { CalendarApp } from './CalendarApp';\n\nimport './styles.css'\n\n\nReactDOM.render(\n    <CalendarApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}